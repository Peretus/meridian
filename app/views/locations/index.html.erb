<% content_for :head do %>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <style>
    #map {
      height: 600px;
      width: 100%;
      border-radius: 8px;
    }
  </style>
<% end %>

<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold">Locations Map</h1>
    <div class="flex gap-4">
      <%= link_to 'Classifications', classifications_locations_path,
          class: "text-blue-500 hover:text-blue-700 underline" %>
      <%= link_to 'Upload GeoJSON', new_geojson_import_path, 
          class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
    </div>
  </div>

  <div id="map"></div>
</div>

<script>
  function initializeMap() {
    // Check if map is already initialized
    if (window.currentMap) {
      window.currentMap.remove();
    }

    // Initialize the map without setting initial view
    var map = L.map('map', {
      minZoom: 2
    });
    window.currentMap = map;

    // Add the OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    // Set a default world view while loading
    map.setView([0, 0], 2);

    // Fetch and display the GeoJSON data
    fetch('/locations.json')
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (!data || !data.features || data.features.length === 0) {
          console.log('No locations found');
          return;
        }

        const geoJsonLayer = L.geoJSON(data, {
          pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, {
              radius: 8,
              fillColor: "#ff7800",
              color: "#000",
              weight: 1,
              opacity: 1,
              fillOpacity: 0.8
            });
          },
          onEachFeature: function(feature, layer) {
            if (feature.properties) {
              layer.bindPopup(`
                <strong>ID:</strong> ${feature.properties.id}<br>
                <strong>Source:</strong> ${feature.properties.source}<br>
                <strong>Created:</strong> ${new Date(feature.properties.created_at).toLocaleString()}<br>
                <strong>Fetched:</strong> ${feature.properties.fetched_at ? new Date(feature.properties.fetched_at).toLocaleString() : 'N/A'}
              `);
            }
          }
        }).addTo(map);

        // Fit the map to the bounds of all points
        const bounds = geoJsonLayer.getBounds();
        map.fitBounds(bounds, {
          padding: [50, 50],
          maxZoom: 12
        });
      })
      .catch(error => {
        console.error('Error loading locations:', error);
      });
  }

  // Initialize on regular page load
  document.addEventListener('DOMContentLoaded', initializeMap);
  
  // Initialize on Turbo navigation
  document.addEventListener('turbo:load', initializeMap);
  
  // Clean up map when navigating away
  document.addEventListener('turbo:before-render', function() {
    if (window.currentMap) {
      window.currentMap.remove();
      window.currentMap = null;
    }
  });
</script> 