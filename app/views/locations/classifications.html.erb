<%# app/views/locations/classifications.html.erb %>
<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold">Classifications</h1>
    <div class="flex gap-4">
      <%= link_to 'View Map', locations_path, 
          class: "text-blue-500 hover:text-blue-700 underline" %>
    </div>
  </div>

  <%# Training Data Export Section %>
  <div class="mb-8 p-6 bg-white rounded-lg shadow">
    <h2 class="text-xl font-semibold mb-4">Training Data Export</h2>
    <div class="flex items-center justify-between">
      <div class="text-sm text-gray-600">
        <p>Human-classified examples available:</p>
        <ul class="mt-2 space-y-1">
          <li>• Positive examples: <%= @positive_count %></li>
          <li>• Negative examples: <%= @negative_count %></li>
          <li>• Balanced dataset will contain: <%= [@positive_count, @negative_count].min %> examples of each</li>
        </ul>
      </div>
      <% if @can_download_training_data %>
        <%= link_to download_training_data_locations_path, 
            class: "px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 flex items-center gap-2" do %>
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
          </svg>
          Download Training Data
        <% end %>
      <% else %>
        <div class="text-sm text-gray-500">
          Need at least 50 examples of each type to download training data
        </div>
      <% end %>
    </div>
  </div>

  <%# Navigation Links %>
  <div class="mb-8 flex flex-wrap gap-4">
    <%= link_to 'Human Positive', 
        (params[:classifier] == 'human' && params[:result] == 'positive') ? classifications_locations_path : classifications_locations_path(classifier: 'human', result: 'positive'),
        class: "px-4 py-2 rounded #{params[:classifier] == 'human' && params[:result] == 'positive' ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}" %>
    
    <%= link_to 'Human Negative', 
        (params[:classifier] == 'human' && params[:result] == 'negative') ? classifications_locations_path : classifications_locations_path(classifier: 'human', result: 'negative'),
        class: "px-4 py-2 rounded #{params[:classifier] == 'human' && params[:result] == 'negative' ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}" %>
    
    <%= link_to 'Machine Positive', 
        (params[:classifier] == 'machine' && params[:result] == 'positive') ? classifications_locations_path : classifications_locations_path(classifier: 'machine', result: 'positive'),
        class: "px-4 py-2 rounded #{params[:classifier] == 'machine' && params[:result] == 'positive' ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}" %>
    
    <%= link_to 'Machine Negative', 
        (params[:classifier] == 'machine' && params[:result] == 'negative') ? classifications_locations_path : classifications_locations_path(classifier: 'machine', result: 'negative'),
        class: "px-4 py-2 rounded #{params[:classifier] == 'machine' && params[:result] == 'negative' ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}" %>
    
    <%= link_to 'Conflicts', 
        params[:status] == 'conflict' ? classifications_locations_path : classifications_locations_path(status: 'conflict'),
        class: "px-4 py-2 rounded #{params[:status] == 'conflict' ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}" %>

    <%= link_to 'Offset Points', 
        params[:type] == 'offset' ? classifications_locations_path : classifications_locations_path(type: 'offset'),
        class: "px-4 py-2 rounded #{params[:type] == 'offset' ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}" %>
  </div>

  <%# Results Grid %>
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
    <% @locations.each do |location| %>
      <div class="relative group">
        <div class="aspect-w-1 aspect-h-1 w-full">
          <%= image_tag url_for(location.satellite_image),
              class: "w-full h-full object-cover rounded-lg border-4 #{classification_border_class(location)}",
              alt: "Satellite image for location #{location.id}" %>
          
          <% if location.classified_by_human? && !location.source&.start_with?('offset_') %>
            <button onclick="toggleClassification(<%= location.id %>)" 
                    class="absolute top-4 right-4 bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-md opacity-0 group-hover:opacity-100 flex items-center space-x-2 text-xs">
              <svg style="width: 14px; height: 14px; transform: scale(0.9)" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"/>
              </svg>
              <span>Switch Classification</span>
            </button>
          <% end %>

          <% if location.classifications.by_machine.latest.first&.is_result == false && !location.source&.start_with?('offset_') %>
            <button onclick="markAsAnchorage(<%= location.id %>)" 
                    class="absolute top-4 right-4 bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-md opacity-0 group-hover:opacity-100 flex items-center space-x-2 text-xs">
              <svg style="width: 14px; height: 14px; transform: scale(0.9)" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
              <span>Mark as Anchorage</span>
            </button>
          <% end %>

          <% if location.source&.start_with?('offset_') && location.classifications.by_human.latest.first&.is_result %>
            <button onclick="declassifyOffsetPoint(<%= location.id %>)" 
                    class="absolute top-4 right-4 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md opacity-0 group-hover:opacity-100 flex items-center space-x-2 text-xs">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
              <span>Not an Anchorage</span>
            </button>
          <% end %>

          <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white p-2 rounded-b-lg opacity-0 group-hover:opacity-100">
            <div class="text-sm">
              ID: <%= location.id %><br>
              <% if location.source&.start_with?('offset_') %>
                <% match = location.source.match(/offset_(\w+)_(\d+)m_from_(\d+)/) %>
                <% if match %>
                  Offset: <%= match[1].capitalize %> <%= match[2] %>m from <%= match[3] %><br>
                <% end %>
                <% human_class = location.classifications.by_human.latest.first %>
                <% if human_class %>
                  Classification: <%= human_class.is_result ? 'Positive' : 'Negative' %> (<%= time_ago_in_words(human_class.created_at) %> ago)<br>
                <% else %>
                  Classification: Missing<br>
                <% end %>
              <% end %>
              <% human_class = location.classifications.by_human.latest.first %>
              <% machine_class = location.classifications.by_machine.latest.first %>
              Human: <%= human_class ? (human_class.is_result ? 'Positive' : 'Negative') : 'Unclassified' %><br>
              Machine: <%= machine_class ? (machine_class.is_result ? 'Positive' : 'Negative') : 'Unclassified' %><br>
              Fetched: <%= time_ago_in_words(location.fetched_at) %> ago
            </div>
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <div class="mt-8">
    <%= paginate @locations %>
  </div>
</div> 

<%= javascript_tag nonce: true do %>
  function toggleClassification(id) {
    fetch(`/locations/${id}/toggle_classification`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // Reload the page to show the updated classification
        window.location.reload();
      } else {
        alert(data.error || 'Failed to toggle classification');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Failed to toggle classification');
    });
  }

  function markAsAnchorage(id) {
    fetch(`/locations/${id}/mark_as_anchorage`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // Reload the page to show the updated classification
        window.location.reload();
      } else {
        alert(data.error || 'Failed to mark as anchorage');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Failed to mark as anchorage');
    });
  }

  function declassifyOffsetPoint(id) {
    fetch(`/locations/${id}/toggle_classification`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // Reload the page to show the updated classification
        window.location.reload();
      } else {
        alert(data.error || 'Failed to declassify point');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Failed to declassify point');
    });
  }
<% end %> 